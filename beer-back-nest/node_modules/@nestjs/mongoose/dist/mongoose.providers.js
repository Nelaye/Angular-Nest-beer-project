"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const mongoose_utils_1 = require("./common/mongoose.utils");
function addDiscriminators(model, discriminators) {
    if (discriminators) {
        for (const { name, schema } of discriminators) {
            model.discriminator(name, schema);
        }
    }
    return model;
}
function createMongooseProviders(connectionName, options = []) {
    const providers = (options || []).map((option) => ({
        provide: mongoose_utils_1.getModelToken(option.name),
        useFactory: (connection) => {
            const model = connection.model(option.name, option.schema, option.collection);
            return addDiscriminators(model, option.discriminators);
        },
        inject: [mongoose_utils_1.getConnectionToken(connectionName)],
    }));
    return providers;
}
exports.createMongooseProviders = createMongooseProviders;
function createMongooseAsyncProviders(connectionName, modelFactories = []) {
    const providers = (modelFactories || []).map((option) => [
        {
            provide: mongoose_utils_1.getModelToken(option.name),
            useFactory: (connection, ...args) => __awaiter(this, void 0, void 0, function* () {
                const schema = yield option.useFactory(...args);
                const model = connection.model(option.name, schema, option.collection);
                addDiscriminators(model, option.discriminators);
                return model;
            }),
            inject: [mongoose_utils_1.getConnectionToken(connectionName), ...(option.inject || [])],
        },
    ]);
    return common_1.flatten(providers);
}
exports.createMongooseAsyncProviders = createMongooseAsyncProviders;
